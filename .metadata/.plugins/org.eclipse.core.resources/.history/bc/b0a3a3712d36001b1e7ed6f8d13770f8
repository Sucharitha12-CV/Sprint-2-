package com.cg.ohds.web;

import static org.assertj.core.api.Assertions.assertThat;

import java.util.ArrayList;
import java.util.List;

import org.junit.Assert;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import com.cg.ohds.entity.Address;
import com.cg.ohds.entity.Cart;
import com.cg.ohds.entity.Customer;
import com.cg.ohds.entity.Product;
import com.cg.ohds.service.ICartService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

@RunWith(SpringRunner.class)
@WebMvcTest(value = CartController.class)
public class TestCartController {
	@Autowired
    private MockMvc mockMvc;
	@MockBean
	private ICartService cartService;
	@MockBean
	private MapValidationErrorService mapValidationErrorService;
	@Test
	public void testSaveCustomer() throws Exception{
	    String URI = "/cart";
	    Address address=new Address("1rt6","produttur","kadapa","India",12345);
		Customer customer=new Customer(1,"radha","radha1","dght5464","radha@gmail.com","123456789",address);
		Product product=new Product(1,"Mats",900.0,12);
		Product product1=new Product(2,"Matress",955.0,11);
		List<Product> productList=new ArrayList<>();
		productList.add(product);
		productList.add(product1);
		Cart cart=new Cart(1,customer,productList);
	    String jsonInput = this.converttoJson(cart);
	    Mockito.when(cartService.saveCart(Mockito.any(Cart.class))).thenReturn(cart);
	    MvcResult mvcResult = this.mockMvc.perform(MockMvcRequestBuilders.post(URI).accept(MediaType.APPLICATION_JSON).content(jsonInput).contentType(MediaType.APPLICATION_JSON)).andReturn();
	    MockHttpServletResponse mockHttpServletResponse = mvcResult.getResponse();
	    String jsonOutput = mockHttpServletResponse.getContentAsString();
	    assertThat(jsonInput).isEqualTo(jsonOutput);
	}
	@Test
	public void testUpdateProduct() throws Exception {
		String URI = "/cart/{cartId}";
		Address address=new Address("1rt6","produttur","kadapa","India",12345);
		Customer customer=new Customer(1,"radha","radha1","dght5464","radha@gmail.com","123456789",address);
		Product product=new Product(1,"Mats",900.0,12);
		Product product1=new Product(2,"Matress",955.0,11);
		List<Product> productList=new ArrayList<>();
		productList.add(product);
		productList.add(product1);
		Cart cart=new Cart(1,customer,productList);      
        String jsonInput = this.converttoJson(cart);
        System.out.println(jsonInput);
        Mockito.when(cartService.updateCart(cart)).thenReturn(cart);
        MvcResult mvcResult = this.mockMvc.perform(MockMvcRequestBuilders.put(URI,1).accept(MediaType.APPLICATION_JSON).content(jsonInput).contentType(MediaType.APPLICATION_JSON)).andReturn();
        MockHttpServletResponse mockHttpServletResponse = mvcResult.getResponse();
        String jsonOutput = mockHttpServletResponse.getContentAsString();
        System.out.println(jsonOutput);
        assertThat(jsonOutput).isEqualTo("Cart Updated!");
	}
	
	private String converttoJson(Object health) throws JsonProcessingException {
		ObjectMapper objectMapper = new ObjectMapper();
        return objectMapper.writeValueAsString(health);
	}
}
